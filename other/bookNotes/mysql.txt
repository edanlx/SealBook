高性能mysql笔记
《高性能MySQL（第3版）》
第1章 mysql架构与历史
锁
	表锁，开销性能最小的锁粒度，在部分语句如alter table等语句(其会忽略存储引擎的锁机制)
	行级锁，InnoDBhe和XtraDB实现，其可以最大程度地支持并发
事务
	ACID:
		原子性(atomicity)-不可切割不能存在部分成功
		一致性(consistency)-从一个一致性状态转为另一个，即使系统崩溃也不存在中间态
		隔离性(isolation)-其它事务不可见
		持久性(durability)-系统崩溃数据也不会丢失
	隔离级别
		未提交读-会发生脏读问题
		提交读-处理脏读问题
		可重复读-处理可重复读问题(可重复读针对单条记录，幻读针对数量与范围。MVCC机制解决了幻读问题)
		可串行化-解决所有问题，但是效率低下
	死锁
		两个及以上的事务同时锁定同一个资源。
		事务1
			update 1 from dual where id = 1
			update 1 from dual where id = 2
		事务2
			update 2 from dual where id = 2
			update 3 from dual where id = 1
		如上情况，在执行第一句时，此时事务未发生冲突，在执行第二句时事务发生冲突，互相等待。传统做法为等待一段时间后放弃返回错误，但会引起慢查询。InnoDB在做法为回滚做少行数的事务。
	事务日志
		因为写日志是按顺序的要快很多，所以通常做法为在日志持久化后，再慢慢刷到实际数据库中，此方式被称之为预写式日志，修改数据要写两次磁盘
	InnoDB的显式锁
		select .... for update(非sql规范)
	InnoDB的MVCC
		不同数据库，不同存储引擎的MVCC实现不同，在这方面sql并没有统一规范，但实现思路均为保存某一时间的快照，根据事务开始的时间不同，快照数据可能是不一样的。
		在InnoDB中每行记录后还有行创建版本号、行删除版本号。每开始一个新的事务，系统版本号就会递增
		可重复读级别简易操作:
			selete
				InnoDB会根据一下两个条件检查每行记录:
				a.InnoDB只查找版本早于当前事务版本的数据行(也就是，行的系统版本号小于或等于事务的系统版本号)，这样可以确保实物读取的行，要么是在事务开始之前已经存在的，要么是事务自身插入或者修改过的。
				b.行的删除版本要么未定义，要么大于当前事务版本号。这可以确保事务读取到的行，在事务开始之前未被删除。
				create_version <= current_version < delete_version
			insert
			 	InnoDB为新插入的每一行保存当前系统版本号作为行版本号
			delete
				InnoDB为删除的每一行保存当前系统版本号作为删除标识
			update
				InnoDB为插入一行新纪录，保存当前系统版本号作为行版本号,同时保存当前系统版本号到原来的行作为删除标识(注意新增和删除是两列版本号)
		当事务A开启后，事务b再开启，事务b此时插入id=1，但是此时事务a依然查不到，但是如果更新id=1则成功
		InnoDB的MVCC只能解决部分幻读问题，如果某事务在当前事务之前开始则会存在问题,以复杂的修改为例,原数据的创建版本未发生变化，但因为多出来一条数据，如果创建版本小于当前事务则会被查询出来，而原数据因为select.b规则所以不会被查询出来
		对于select（快照读）不会产生幻读，但对于update（当前读）会产生幻读。当两次快照读之间有当前读且此时有新事务插入数据则会出现幻读
		【TODO】
		在MySQL 8.0.3 中，tx_isolation 变量被 transaction_isolation 
		SELECT @@global.tx_isolation;
		SELECT @@session.tx_isolation;
		SET [SESSION | GLOBAL] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE}
		【新版默认REPEATABLE-READ】
存储引擎
	在文件系统中，mysql将每个数据库(schema)保存位数据目录下的一个子目录。创建表时，mysql会在数据库子目录下创建一个和表名相同名的.frm文件保存表的定义。
	使用show table status命令可以查询表的信息。
	Name(表名)、Engine(表的存储类型)、Row_format(行的格式)、Rows(表的行数)、Avg_row_length(平均每行包含的字节数)、Data_length(表数据的大小)、Max_data_length(索引的大小)、Data_free(已分配耽美有使用的空间)、Auto_increnment(下一个自增值)、Create_time(表的创建时间)、Update_time(表最后修改时间)、Collation(表的默认字符集和字符列排序规则)、CheckSum(如果启用，保存的是整个表的实时校验和)
	InnoDB存储引擎(官方手册中的InnoDB事务模型和锁详细描写其的微妙之处)
		因为某些oracle历史原因，目前使用的是InnoDB旧版本，在MYSQL5.1之后集成了InnoDB plugin，其在创建、删除、新增索引时效率增加
		InnoDB除了采用MVCC以外还引入了间隙锁(next-key locking)(record记录锁和gap间隙锁的组合使用)策略防止幻影行的插入。
		【TODO 间隙锁】
		InooDB的索引结构是基于聚簇索引建立的具备很高的性能，但其二级索引(非主键索引)中必须包含主键列，所以如果注解列很大的话，其它所有的索引都会很大。
	MyISAM存储引擎
		MyISAM作为早期官方默认的存储引擎导致早期很多人认为mysql是不支持事务的。
		对于近乎只读场景或者表比较小依然是可以使用的优秀存储引擎。其主要问题在于表锁问题，导致其长期处于locked状态
	其它存储引擎目前并未大规模使用，值得一提的是mysql支持第三方存储引擎
		XtraDB，其基于InnoDB的改进版本，对于BLOB的优化要优秀不少
		列存储引擎Infobright，有了解过列存储的自然明白其对于大数据量做聚合类处理的强大之处
第2章 mysql基准测试
第3章 服务器性能剖析
第4章 Scheam与数据类型优化
选择优化的数据了许
	基本原则
		更小的通常更好
		整形比字符串更好
		尽量避免null
	整形:TINYINT,SMALLINT,MEDIUMINT,INT,BIGINT，分别使用8，16，24，32，64位存储空间，其可以设置UNSIGNED表示不允许负值，虽然mysql可以为其指定宽度，但其实是没有意义的
	实数:DECIMAL、FLOAT、DOUBLE等,DECIMAL可以存储比BIGINT还打的整数。对于DECIMAL(18,9)表示小数点左边最大9，右边最大9
	字符串:varchar和char。前者可变，后者定长。需要注意的是varchar虽然可变,存储空间虽然不同但是临时表消耗的内存开销是不一样的
	大文本:BLOB和TEXT。如果对齐使用排序，务必使用order by sustring(colume, length)，其并不支持索引。如果没有这样使用name就会导致磁盘临时表，这是非常消性能的(explain 计划的extra会包含 using temporary。如果在排序中出现了文件排序则说明为重新构建排序，性能极差)(文件排序不一定会生成文件)
	枚举:enum，虽然其可以有更高的性能，但是会带来其它麻烦，如果排序则会根据定义顺序，而非字符串顺序,在新增类型时还需啊哟修改表结构。如果使用则不可定义数字，因为其实际值就是按照数字存储的避免混淆。为了其良好的扩展性，应使用自身系统的字典类对其进行定义。
	时间类型:优先使用timestamp，其存储空间更小。
	位:bit,虽然在某些情况很好用，但为了系统的可读性和扩展性还是避免使用。
物化视图:
	利用Flixviews的物化视图往往可以比缓存表或汇总表带来更好的扩展性和有效性。
alert table
	一般而言，大部分alert table操作导致mysql服务中断。alter column则不会发生该情况
第5章 创建高性能的索引
B-Tree
	B-Tree通常意味着所有的值都是按顺讯存储的，并且每一个叶子页到根的距离相同
	【TODO P149图5-1】
	(https://www.cnblogs.com/aspirant/p/11475295.html b+树与跳表的区别，主要为一个是高度通常为3平衡二叉树扩展，另一个是每层宽度通常为3连表扩展)
	【页 key1 页】，左侧子页数据都小于key1，有侧子页大于等于key1，两个子页之间也会有指针，一页在InnoDB中为16k，最终在最底层的页子节点指向被引用的数据。也即根节点和叶子节点之间有多层节点页。
	以这种结构存储的索引揭示了全职匹配、左前缀、范围可以使用索引的原因
哈希索引
	在等值匹配时为O(1)的速度，值得一提的是InnoDB在发现某个值被匹配很频繁时，会自动建立哈希索引。
合适的索引
	分情况建立联合索引和单列索引，如果使用联合索引则为其安排合适的顺序。
	聚簇索引
		聚簇就是把数据行和响铃的键值保存在一起。因为无法同时吧数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。即叶子页会包含所有数据。被引用的列就是主键列，如果没有定义主键会选自唯一非空索引，如果也没有则会隐式创建。
		缺点:如果不是按顺序插入则会可能面临"页分裂"问题(当行的主键插入到某个已经满了的页)。在使用二级索引时会查询两次数据。
	【TODO p167 5-9 聚簇和非聚簇对比图】
|表名|行数|时间(秒)索引大小(MB)|
|--|--|--|--|
|userinfo|1 000 000|137|342|
|userino_uuid|1 000 000|180|544|
|userinfo|3 000 000|1233|1036|
|userino_uuid|3 000 000|3525|1707|
覆盖索引
	所谓覆盖就是应用的二级索引里边有你需要的全部数据了。纠正一下innodb表引擎里二级索引叶子节是保存索引字段数据的。
	目前只有InnoDB的b+tree可以使用该功能，即使用where查出小表selct id后再自关联自己，效率可以成几何式提升。
排序
	索引不止是在where中是用，sort和group中也可以使用索引
重复索引
	应当避免建立重复索引，这会使得mysql在索引优化时耗费更长的时间
【位置交换依然可以走索引，优化会经过位置交换】
第6章 查询性能优化
1.是否返回了不必要的数据
2.是否扫描额外的记录,通常发生在全表扫描，如果使用索引则会范围扫描
3.切分查询，有时候多个查询可能是更好的
【TODO 6-1查询执行路径】
查询优化处理
	语法解析器和预处理:将sql解析成一个树验证sql是否正确
	查询优化器:一条sql有多种查询方式，选择最优返回(使用 shoow  statuss like 'last_query_cost'可以查询扫描了多少个数据页)，查询优化分为静态和动态优化例如min(id)，那么只需要查询索引最左侧即可。
	提前中智查询、子查询优化、等值传播等等
	优化提示:因为mysql有很多优化方案，你可以使用指定的方式，但最好不要这么做，这会让mysql升级后变更优化方案时让新版本的优化策略失效。
第7章 mysql高级特性
	分区表:一般情况下更建议直接使用分库，便于横向扩展
	视图:在重构表的时候非常适合使用视图，避免大规模重构代码
	存储过程、函数、触发器:不建议使用，对于切换数据库非常不友好。
	全文搜索:正常情况下还是使用es
	分布式(XA)事务:性能较差，建议使用seata等第三方工具
	缓存:建议关掉走mybaties和redis的方式。
第8章 优化服务器设置
第9章 操作系统和硬件优化
第10章 复制
	复制基本工作:
		1.在主库上把数据更改记录到二进制日志(Binart Log)中
		2.备库将主库上的日志复制到自己的中级日志(Relay Log)中
		3.备库读取中继日志中的时间，将其重放到备库数据之上。
	设置主库和备库:
		明确服务器ID，可以选择ip地址的末8位保证其有意义且唯一
		主库:
			log_bin = /var/lib/mysql/mysql-bin
			server_id=10
			# 安全相关
			sync_binlog=1
			innodb_flush_logs_at_at_trx_commit
			innodb_support_xa=1
			innodb_safe_binlog
			#5.5以后添加
			sync_master_info = 1
			sync_relay_log=1
			sync_relay_log_info =1
		备库:
			log_bin = /path/to/logs/relay-bin
			server_id = 2
			relay_log = /var/lib/mysql/mysql-relay-bin
			log_slave_updates=1
			read_only=1
			skip_slave_start
		启动复制:
		mysql>CHANGE MASTER TO MASTER_HOST = 'server1',
		->MASTER_USER ='repl',
		->MASTER_PASSWORD='password',
		->MASTER_LOG_FILE='mysql-bin.000001',
		->MASTER_LOG_POS=0
		->SHOW SLAVE STATUS
		->START SLAVE
		->SHOW PROCESSLIST(查看线程列表，主库可以看到连接线程，备库可以看到IO线程和SQL线程)
		【TODO 分布式复制】
第11章 可扩展的mysql
第12章 可用性
第13章 云端的mysql
第14章 应用层优化
第15章 备份与恢复
第16章 用户工具

索引下推:在出现可能是多条数据的时候进行索引下推这样没必要回表
索引覆盖:
select * from t_id_big order by id1 limit 100000,100100 该分页速度较慢时

使用索引覆盖改写，即小表驱动大表
select * from t_id_big t1 INNER JOIN (
select id1 from t_id_big order by id1 limit 100000,100100 
)t2 on t1.id1 = t2.id1

批量创建mysql数据
CREATE PROCEDURE p9 () 
BEGIN 
declare i int; 
set i=1000; 
while i<1000000 do 
insert into t_id_big values(i,i,i);
set i = i + 1; 
end while;
END;