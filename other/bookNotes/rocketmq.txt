《rocketmq技术内幕》
学习之前应该熟悉netty
1.阅读源代码前的准备
	1.3 RocketMQ 的设计理念和目标
		1.3.1设计理念
			因为 Topic 路由信息无须在集群之间保持强一致，追求最终一致性，并且能容忍分钟级的不一致 正是基于此种情况 RocketMQ NameServer 集群之间互不通信
		1.3.2 设计目标
			1. 架构模式
				发布订阅模式
			2. 顺序消患
				就是消息消费者按照消息达到消息存储服务器的顺序消费rocketMQ可以严格保证消息有序
			3. 消息过滤
				消息消费者可以对同一主题下的消息按照规 只消费自己感兴趣的消息,在brocker过滤则不传递给消费者
			4. 消息存储
				消息堆积能力和消息存储性能。RocketMQ 追求消息存储的高性能，引人内存映射机制，所有主题的消息顺序存储在同一个文件中 同时为了避免消息无限在消息存储服务器中累积，引入了消息文件过期机制与文件存储空间报警机制
			5. 消息高可用性
				通常影响消息可靠性的有以下几种情况
					1.Broker 正常关机
					2.Broker 异常 Crash
					3.OS Crash
					4.机器断电，但 能立即恢复供电情况
					5.机器无法开机
					6.硬件损坏
					1~4会在异步刷盘丢失少量信息
					5~6开启异步复制可以保证只丢失少量信息
			6.消息消费低延迟
				RocketMQ 在消息不发生消息堆积时，以长轮询模式实现准实时的消息推送模式
			7.确保消息必须被消费一次
				RocketMQ 通过消息消费确认机制（ACK）来确保消息至少被消费一次
			8. 回溯消息
				已经消费成功的消息需要再次消费
			9. 消息堆积
				必须应对数据洪峰。过期时间默认3天
			10. 定时消息
				到达Brocker不可被立即消费，到达指定时间才可以消费
			11. 消息重试机制
				消息重试是指消息在消费时，如果发送异常，消息中间件需要支持消息重新投递，RocketMQ 支持消息重试机制
2.rocketmq路由中心NameServer
	2.1 NameServer 架构设计
		消息消费者(Consumer）订阅感兴趣的主题，消息服务器根据订阅信息（路由信息）将消息推送到消费者（ PUSH 模式）或者消息消费者主动向消息服务器拉取消息（ PULL 模式），从而实现消息生产者与消息消费者解耦
	2.2 NameServer 启动流程
		Step1 首先来解析配置文件 需要填充NameServerConfig、NettyServerConfig属性值
		Step2 根据启动属性创建NamesrvController 实例，并初始化该实例 NameServerController
			开启两个定时任务，即心跳检测
			定时任务1: NameServer 每隔1Os 扫描一次 Broker 移除处于不激活状态的 Broker
			定时任务 2: nameserver 每隔 10 分钟打印一次 KV配置
		Step3 ：注册 JVM 钩子函数并启动服务器， 以便监昕 Broker、消息生产者的网络请求(jvm的shutdownHook，在tomcat中亦有使用)
	2.3 NameServer的路由注册、故障剔除
		NameServer主要作用是为消息生产者和消息消费者提供关于主题 Topic 的路由信息，那么 NameServer不仅要存储路由的基础信息，还要能够管理Broker节点，包括路由路由删除等功能
		2.3.1路由元信息
			```
			// Topic 消息队列路由信息，消息发送时根据路由表进行负 均衡
			private final HashMap<String, List<QueueData> topicQueueTable;
			// Broker 基础信息， brokerName 属集群名称 主备 Broker地址
			private final HashMap<String /* brokerName */, BrokerData> brokerAddrTable; 
			//  Broker 集群信息，存储集群中所有 Broker 名称
			private final HashMap<String /* clusterName */, Set<String>clusterAddrTable; 
			// Broker 状态信息 NameServer 每次收到心跳包时会该信息
			private final HashMap<String/* brokerAddr */ , BrokerLiveinfo> brokerLiveTable; 
			// filterServerTable : Broker 上的 FilterServer 列表，用于类模式消息 滤，
			private final HashMap<String/* brokerAddr */ , List<String>/* Filter Server*/> filterServerTable;
			```
		2.3.2路由注册
			1。Brocker发送心跳包
			rocketMQ 路由注册是通过 Broker与Name Server 的心跳功能实现的 Broker 启动时集群中所有的 NameServer发送心跳语句，每隔30s向集群中所有NameServer 发送心跳包,NameServer 收到 Broker跳包时会更新 brokerLiveTabe 缓存中 brokerLiveInfo的lastUpdateTimestamp,然后 Nam Server 每隔 10s 扫描 brokerLiveTable,如果连续120s没有收到心跳包,NameServ将移除该Broker的路由信息同时关闭Socket 连接。

			主要是遍历NameServer 表,Broker消息服务器依次向 NameServer发送心跳包
			2.NameServer处理心跳包
			org.apache rocketmq.namesrv processor.DefaultRequestProcessor网络处理器解析请求类型,如果请求类型为 RequestCode REGISTER_BROKER,则请求最终转发到 RoutelnfoManager#registerBroker
			步骤
				1.路由注册需要加写锁,防止并发修改RoutelnfoManager中的路由表。首先判断Broker所属集群是否存在,如果不存在,则创建，然后将 broker 名加入到集群 Broker集合中
				2.维护 BrokerData ，首先从 brokerAddrTable 根据 BrokerNam 尝试获取Broker 信息,如果不存在,新建 BrokerData 并放入 brokerAddrTable,registerFirst设置为true;如果存在直接替换原先的,registerFirst设置 false ，表示非第一次注册
				3.如果Broker为Master,并且 Broker Topic 配置信息发生变化或者是初次注册需要创建或更新Topic路由元数据，填充topicQueueTable 其实就是为默认主题自动注册路由信息,其中包 MixAll.DEFAULT_TOPIC的路由信息。当消息生产者发送主题时，如果该主题未创建并且Brokerconfig的autoCreateTopicenabl为true时,返回MiAll.DEFAULT TOPIC的路由信息
				4.更新BrokerLivelnfo,存活 Broker 信息表， BrokeLivelnfo 是执行路由删除的重要依据
				5.5 Broker 的过滤器 Server 地址列表 ，一个Broker会关联多个FilterServer消息过滤服务器；如果此 Broker为从节点，则需要查找Broker Master 的节点信息,并更新对应masterAddr属性

			NameServer与Brocker保持长连接，收到心跳包串连执行
		2.3.3路由删除
			RocktMQ 两个触发点来触发路由删除
			1.NameServer定时扫描brokerLiveTable检测上次心跳包与前系统时间的时间差，如果时间戳大于120s,则需要移除 Broker信息
			2.Broker在正常被关闭的情况下,会执行unregisterBroker命令。
		2.3.4路由发现
			RocketMQ路由发现是非实时的，当Topic路由出现变化后,NameServer不主动推送给客户端是由客户端定时拉取主题最新的路由。根据主题名称拉取路由信息的命令编码为： GET_ROUTEINTO_BY_TOPIC
3.rocketmq消息发送
	3.1 漫谈RocketMQ消息发送
		RocketMQ 支持 种消息发送方式 ：
			同步（sync),等待服务器消息返回
			异步（async）服务器消息返回后触发成功或失败回调函数
			单向（oneway)只管发送不管投递结果
	3.2 认识RocketMQ消息
		RocketMQ 消息封装类是 org.apache.rocketmq common.message.Message
		Message 的基础属性主要包括消息所属主题 topic 消息 Flag(RocketMQ 不做处理）、扩展属性、消息体
		Message 扩展属性主要包含下面几个
			tag ：消息 TAG ，用于消息过滤
			keys: Message索引键，多个用空格隔开， RocketMQ 可以根据这些 key 快速检索到消息
			waitStoreMsgOK ：消息发送时是否等消息存储完成后再返回
			delayTimeLeve 消息延迟级别，用于定时消息或消息重试
		这些扩展属性存储在 Message properties
	3.3 生产者启动流程
		消息生产者的代码都在 client 模块中，相对于 RocketMQ 来说，它就是客户端，也是消息的提供者
		3.3.1 初识 DefaultMQProducer 消息发送者
		3.3.2 消息生产者启动流程
		DefaultMQProducerlmpl的start方法
			1.检查 productGroup 是否符合要求；并改变生产者 instanceName 为进程 ID
			2.创建MQClientInstance实例。整个JVM实例中只存在一个MQClientManager实例,维护一个MQClientInstance缓存表private ConcurrentMap<String/* clientId */, MQClientInstance> factoryTable =new ConcurrentHashMap<String, MQClientInstance>(),也就是同一个clientId只会创建一个MQClientInstance。(如果在同一台物理机部署两个应用程序，则会将ip替换为线程)
			3: 向MQClientInstance注册,将当前生产者加入到MQClientInstance管理中,方便后续调用网络请求、进行心跳检测等。
			4: 启动MQClientInstance,如果MQClientInstance已经启动,则本次启动不会真正执行。
	3.4 消息发送基本流程
		3.4.1 消息长度验证
			最大4M
		3.4.2 查找主题路由信息
			消息发送之前，首先需要获取主题的路由信息，只有获取了这些信息我们才知道消息要发送具体Broker
		3.4.3 选择消息队列
			根据路由信息选择消息队列，返回的消息队列按照 broker 、序号排序。
			举例说明，如果topicA在broker-a, broker-b上分别创建了4个队列。则总共返回8个list。一般根据对消息队列进行轮询获取一个消息队列。
		3.4.4 消息发送
			1.根据MessageQueue获取Brocker的网络地址。如果MQClientInstance的brokerAddrTable未缓存该Brocker的信息,则从NameServer主动更新一下topic的路由信息，如果还找不到则抛异常。
			2.为消息分配全局唯一ID，如果消息体超过4K则进行ZIP压缩并设置消息的系统标记为MessageSysFlag.COMPRESSED_FLAG。如果是事务Prepared消息，则设置消息的系统标记为MessageSysFlag.TRANSACTION_PREPARED_TYPE
			3.如果注册了消息发送钩子函数，则进行调用
			4.构建消息发送包。主要包含如下重要信息：生产者组、主题名称、默认创建主题 Key 、该主题在单个Broker默认队列数、队列ID （队列序号）、消息系统标记( MessageSysFlag，消息发送时间 、消息标记（ RocketMQ 对消息中的 flag 不做任何处理供应用程序使用） 消息扩展属性 、消息重试次数、是否是批量消息
			5.根据消息发送的3中方式进行发送，同步、异步、单向
			6.如果注册了钩子函数，调用after
			通过 DefaultMQProducer#retryTimesWhenSendAsyncFailed 属性来控制消息重试次数
	3.5消息批量发送
		基本逻辑与单条一致，消息体的长度变化而已。
4.rocketmq消息存储
	4.1存储概要设计
		RocketMQ主要存储的文件包括Comitlog 文件、 ConsumeQueue文件、 IndexFile文件。RocketMQ将所有主题的消息存储在同一个文件 ，确保消息发送时顺序写文件
		1.CommitLog ：消息存储文件，所有消息主题的消息都存储在 CommitLog 文件中
		2.ConsumeQueue ：消息消费队列，消息到达 CommitLog 文件后，将异步转发到消息消费队列，供消息消费者消费
		3.IndexFile ：消息索引文件，主要存储消息 Key Offset 的对应关系
		4.事务状态服务：存储每条消息的事务状态
		5.定时消息服务：每一个延迟级别对应一个消息消费队列，存储延迟队列的消息拉取进度
	4.2初识消息存储
		消息存储实现类： org.apache.rocketmq.store.DefaultMessageStore ，它是存储模块里面最重要的一个类
	4.3 消息发送存储流程
		1.如果当前 Broker 停止工作或 Broker SLAVE 角色或当前 Rocket 不支持写入则拒绝消息写入；如果消息主题长度超 256 个字符、消息属性长度超过 65536 个字符将拒绝该消息写人
		2.如果消息的延迟级别大于0，将消息的原主题名称与原消息队列 ID 存入消息属性中，用延迟消息主题 SCHEDULE_TOPIC 、消息队列 ID 更新原先消息的主题与队列是并发消息消费重试关键的一步。
		3.获取当前可以写入 Commitlog文件
		4.在写入 CornrnitLog 之前，先申请 putMessageLock ，也就是将消息存储到CornrnitLog 文件中是串行的
		5.设置消息的存储时间，如 rnappedFile 空，表明$ {ROCKET_HOME}/store/cornrnitlog 目录下不存在任何文件，说明本次消息是第一次消息发送，用偏移量 创建第一个 commit 文件，文件为 00000000000000000000 ，如果文件创建失败，抛出 CREATE_MAPEDFILE_FAILED ，很有可能是磁盘空间不足或权限不够
		6.将消息追加到 MappedFile 首先先获取 MappedFile 当前写指针，如果currentPos大于或等于文件大小则 明文件已写满，抛出 AppendMessageStatus.UNKNOWN_ERROR 如果 currentPos 小于文件大小，通过 slice()方法创建一个与 MappedFile 的共享内存区，并设置 position 为当前指针
		7.创建全局唯一消息 ID ，消息 ID 16 字节
		8.获取该消息在消息队列的偏移量。CommitLog中保存了当前所有消息队列的当前待写入偏移量。
		9.根据消息、体的长度、主题的长度、属性的长度结合消息存储格式计算消息的总长度
		10.存入CommitLog
		11.将消息内容存储到 ByteBuffer 中，然后创建 AppendMessageResult
		12.更新消息队列逻辑偏移量
		13.释放锁
		14.将数据刷盘
	4.4 存储文件组织与内存映射
		4.4.1 MappedFileQueue 映射文件队列
			MappedFileQueue是MappedFile的管理容器，包括存储目录等信息
		4.4.2 MappedFile 内存映射文件
			MappedFile是RocketMQ 存映射文件的具体实现，文件大小，文件名称等，即CommitLog
		4.4.3 TransientStorePool
			TransientStorePool 短暂的存储池 RocketMQ 单独 建一个 MappedByteBuffer 内存缓存池，用来临 存储数据，数据先写人该 存映射中，然后由 commit 线程定时将数据从该内存复制到与目的物理文件对应的内存映射中。(直接内存)
	4.5 RocketMQ 存储文件
		4.5.1 Commitlog 文件
			该目录下的文件主要存储消息，其特点是每一条消息长度不相同
		4.5.2 ConsumeQueue 文件
			RocketMQ 基于主题订阅模式实现消息消费，消费者关心的是一个主题下的所有消息，但由于同一主题的消息不连续地存储在 commitlog 文件中，试想一下如果消息消费者直接从消息存储文件（commitlog）中去遍历查找订阅主题下的消息，效率将极其低下，RocketMQ 为了适应消息消费的检索需求，设计了消息消费队列文件（Consumequeue），该文件可以看成是 Commitlog 关于消息消费的“索引”文件，
		4.5.3 Index 索引文件
			消息消费队列 RocketMQ 为消息订阅构建的索引，提高根据主题与消息队列检索消息的速度，另外 RocketMQ 入了 Hash索引机制为消息建立索引， HashMap包含两个基本点 Hash 槽与 Hash 的链表结
		4.5.4 checkpoint 文件
			checkpoint 作用是记录 Comitlog、ConsumeQueue、Index文件的刷盘时间点，
	4.6 实时更新消息消费队列与索引文件
		4.6.1 根据消息更新 ConumeQueue
			CommitLogDispatcherBuildConsumeQueue
		4.6.2 根据消息更新 Index 索引文件
			CommitLogDispatcherBuildlndex
	4.7 消息队列与索引文件恢复
		4.7.1 broker 正常停止文件恢复
			1.从倒数第三个文件开始恢复
			2.计算偏移量
			3.遍历commitlog
			4.更新MappedFileQueue的内存指针
			5.删除offest之后的文件
		4.7.2 Broker 异常停止文件恢复
			1.判断文件格式
			2.判断文件大小
			3.判断时间戳
			..
	4.8 文件刷盘机制
		4.8.1 Broker 同步刷盘
			同步刷盘，指的是在消息追加到内存映射文件的内存中后，立即将数据从内存刷磁盘文件，由CommitLog的handleDiskFlush 方法实现
		4.8.2 Broker 异步刷盘
			首先将消息追加到直接内存
	4.9 过期文件删除机制
		默认72小时，不关注是否全部被消费
5.rocketmq消息消费
	5.1 RocketMQ 消息消费概述
	5.2 消息消费者初探
		消费者每次拉取默认32条消息
	5.3 消费者启动流程
		1.构建主题订阅信息 SubscriptionData 并加入到 Rebalancelmpl 的订阅消息中
		2.初始化 MQClientlnstance Rebalancelmple(负载均衡)
		3.初始化消息进度 如果消息消费是集群模式，那么消息进度保存在 Broker 上；如果是广播模式，那么消息消费进度存储在消费端
	5.4 消息拉取
		5.4.1 PullMessageService 实现机制
			PullRequest
				String consumerGroup ：消费者组
				MssageQueue messageQueue：待拉取消费队列
				ProcessQueue processQueue ：消息处理队列，从 Broker 拉取到的消息先存人ProccessQueue， 然后再提交到消费者消费线程池消费
				long nextOffset ：待拉取的 MessageQueue 偏移量
				Boolean lockedFirst ：是否被锁定
		5.4.2 ProcessQueue 实现机制
			ProccessQueue 核心属性
				TreeMap<Long, MessageExt>msgTreeMap ：消息存储容器,键为消息在ConsumeQueue中的偏移量，MessageExt ：消息实体
				TreeMap<Long, MessageExt> msgTreeMapTemp ：消息临时存储容器，键为消息在ConsumeQueue 中的偏移量，MessageExt 为消息实体，该结构用于处理顺序消息，消息消费线程从ProcessQueue的msgTreeMap 中取出消息前，先将消息临时存储在 msgTreeMapTemp
				ReadWriteLock lockTreeMap = new ReentrantReadWriteLock（）：读写锁
				AtomicLong msgCount: ProcessQueue 中总消息总数
				volatile long queueOffsetMax：当前 ProcessQueue 中包 最大队列偏移
				volatile boolean dropped = false ：当前 ProccesQueue 是否被丢弃
				volatile long lastPullTimestamp ：上次开始消息拉取时间戳
				volatile long lastConsumeTime stamp ：上次消息消费时间戳
		5.4.3 消息拉取基本流程
			1.消息拉取客户端消息拉取请求封装
			2.消息服务器查找找并返回消息
			3.消息拉取客户端处理返回的消息
	5.5 消息队列负载与重新分布机制
		提供5种负载均衡算法
	5.6 消息消费过程
		5.6.1 消息消费
			1.确认消息条数,consumeMessageBatchMaxSize
			2.如果拉取的消息条数大于32则进行分页
			3.进入具体消息消费时会先检查 processQueue dropped ，如果设置为 true该队列的消费丢弃
			4.执行消息消费钩子函数 ConsumeMessageHook#conumeMessageBefore函数
			5.判断消息的延时级别是否可以消费
			6.执行具体的消费逻辑
			7，执行消息消费钩子函数 ConsumeMessageHook#conumeMessageAfter函数
			8.处理结束后再次判断dropped
			9.根据消息监昕器返回的结果 计算 acklndex，如果返回CONSUME_SUCCESS,acklndex 设置为 msgs.size() ，如果返回 RECONSUME_LATER, acklndex -1
			10.返回ACK消息
			11.从 ProcessQueue 移除这批消息，
		5.6.2 消息确认（ACK)
			1.获取消费组的订阅配置信息，查看该消费组是否支持重试(消息最大重试次数默认6)
			2.创建重试主题，重试主题名称 %RETRY%＋消费组名称，并从重试队列中随机选择一个队列 ，并构建 TopicConfig 主题配置信息
			3.根据消息物理偏移量 commitlog 文件中获取消息， 同时将消息的主题存入属性中
			4.设置消息重试次数，如果超过maxReconsumeTimes ，则进入DLQ队列中， RocketMQ 将不负责再次调度进行消费了， 需要人工干预
			5.根据原先的消息创建一个新的消息对象，重试消息会有自己的唯一消息 ID
			6.将消息存入到commitLog中
			7.ACK 消息存入 CommitLog 文件后 ，将依托RocketMQ 定时消息机制在延迟时间到期后再次将消息拉取，提交消费线程池，发送失败会在5秒后重发
		5.6.3 消费进度管理
			1.广播模式消费进度存储
				广播模式消息消费进度存储在消费者本地，其实 org.apache.rocketmq.client. consumer.store.LocalFileOffsetStore
			2. 集群模式消费进度存储
				集群模式消息进度存储文件存放在消息服务端Broker,每10s更新一次
	5.7 定时消息机制
		5.7.1 load 方法
			该方法主要完成延迟消息消费队列消息进度的加载与 delayL velTable 数据的构造，延迟队列消息消费进度默认存储路径为${ROCKET_HOME}/store/config/delayOffst.json
		5.7.2 start方法
			1.根据延迟队列创建定时任务，遍历延迟级别
			2.创建定时任务，每隔10s持久化一次延迟队列的消息消费进度
		5.7.3 定时调度逻辑
			SchduleMessageServic的start方法启动后，会为每一个延迟级别创建一个调度任务
			1.根据队列ID与延迟主题查找消息消费队列，如果未找说明目前并不存在该延时级别的消息，忽略本次任务
			2.根据 offse 从消息消费队列中获取当前队列中所有有效的消息 如果未找到，更新一下延迟队列定时拉取进度并创建定时任务待下一次继续尝试
			3.遍历ConsumeQueue，解析偏移量、字节长度等信息
			4.从commitlog中寻找
			5.根据消息重新构建新的消息对象，清除消息的延迟级别属性（ delayLevel ）、并恢复消息原先的消息主题与消息消费队列，消息的消费次数 reconsumeTimes 并不会丢失
			6.将消息再次存入commitLog
			7.更新延迟队列拉取进度
	5.8 消息过滤机制
		tag和sql92
		1.消费者订阅消息主题与消息过滤表达式 构建订阅信息并加入到 Rebancelmpl中，以便 Rebalancelmpl 进行消息队列负载
		2.根据订阅消息构建消息拉取标记，设置subExpression、classFilter 等与消息过滤相关
		3.根据主题、消息过滤表达式构建订阅消息实体
		4.构建消息过滤对象
		5.根据偏移量拉取消息后，首先根据 ConsumeQueue 条目进行消息过滤
		6.再从commitLog获取消息根据tag过滤
	5.9 顺序消息
		5.9.1 消息队列负载
			顺序消息消费与并发消息消费的第一个关键区别，顺序消息在创建消息队列拉取任务时需要在 Broker 服务器锁定该消息队列。
		5.9.2 消息拉取
			如果消息处理队列未被锁定，则延迟 3s 后再将 PullRequest 对象放入到拉取任务中，如果该处队列是第一次拉取任务，则首先计算拉取偏移量，然后 向消息服务端拉取消息
		5.9.3 消息消费
			1.ConsumeMessageOrderlyService 启动方法
				1.ConcurrentMap< MessageQueue, Process Queue> processQueueTable 将消息队列按照Broker 组织成 Map<String/*brokerName*,Set<MessageQueue＞＞ ，方便下一步向Broker发送锁定消息队列请求
				2.向 Broker ( Master节点）发送锁定消息队列， 方法返回成功被当前消费者锁定的消息消费队列
				3.将成功锁定的消息消费队列相对应的处理队列设为锁定状态，同时更新加锁时间
				4.遍历当前处理队列中的消息消费队列，如果当前消费者不持有该消息队列的锁将处理队列锁状态设置为 false ，暂停该消息消费队列的消息拉取与消息消费
			2.ConsumeMessageOrderlyService 提交消费任务
				。。。
		5.9.4 消息队列锁实现
			1.REBALANCE_LOCK_MAX_LIVE_TIME ：锁最大存活时间 可以通过,-Drocketmq.broker.rebalance.lockMaxLiveTime 设置，默认为 60s
			2.ConcurrentMap<String/ * group*/，ConcurrentHashMap MessageQueue, LockEntry>> mqLockTable ：锁容器，以消息消费组分组，每个消息队列对应一个锁对象，表示当前该消息队列被消费组中哪个消费者所持有
6.消息过滤FilterServer
	6.1 ClassFilter 运行机制
		基于类模式过滤是指在 Broker 端运行或多个消息过滤服务器（ FilterServer），消息消费者 FilterServer 拉取消息， FilterServer 将消息消费者的拉取命令转发到 Broker
	6.2 FilterServer 注册剖析
	6.3 类过滤模式订阅机制
	6.4 消息拉取
	6.5小结：
		优势1.filter和brocker运行在同一台机器，不会性能浪费
		2.减少服务器端过滤压力
7.rocketmq主从同步
	7.1 RocketMQ 主从复制原理
		7.1.1 HAService 整体工作机制
			1.主服务器启动，并在特定端口上监昕从服务器的连接
			2.从服务器主动连接主服务器，主服务器接收客户端的连接，并建立相关TCP连接
			3.从服务器主动向主服务器发送待拉取消息偏移 ，主服务器解析请求并返回消息给从服务器
			4.从服务器保存消息并继续发送新的消息同步请求
		7.1.2 AcceptSocketService 实现原理
			基于NIO服务端标准实现，然后为每一个连接创建一个 HAConnection对象。 HAConnection 将负责 -S 数据同步逻辑
		7.1.3GoupTransferService 实现原理
			GroupTransferService 主从同步阻塞实现，如果是同步主从模式，消息发送者将消息刷写到磁盘后，需要继续等待新数据被传输到从服务器，从服务器数据的复制是在另一个线程 HAConnection 中去拉取
		7.1.4 HAClient 实现原理
			HAClient 是主从同步 Slave 端的核心实现类
			1.连接master服务器
			2.进行心跳，5s
			3.向服务器反馈偏移量
			4.进行事件选择
			5.处理从amster服务器传回的消息
		7.1.5 HAConnection 实现原理
			1.分配内存
			2.NIO写入内存
			3.处理并发为顺序
			4.读取不到信息则处于半关闭状态
	7.2 RocketMQ 读写分离机制
		RocketMQ 读写分离与 他中间件的实现方式完全不同， RocketMQ 是消费者首先向主服务器发起拉取消息请求，然后主服务器返回一批消息，然后根据主服务器负载压力与主从同步情况，向从服务器建议下次消息拉取是从主服务器还是从从服务器拉取
8.rocketmq事务消息
	8.1 事务消息实现思想
		rocketmq的实现原理基于两阶段提交和定时事务状态回查来决定消息最终是提交还是回滚
	8.2 事务消息发送流程
		1.为消息添加属性
		2.根据消息发送解雇执行动作
		3.结束事务。根据返回结果进行提交或回滚
	8.3 提交或回滚事务
		事务的回滚与提交的唯一差别是无须将消息恢复原主题，直接删除 prepare 消息即可，同样是将预处理消息存储在 RMQ_SYS_TRANS_OP_HALF _TOPIC 主题中，表示已处理过该消息
	8.4 事务消息回查事务状态
		定时任务
9.rocketmq实战