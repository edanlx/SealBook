devops note
《devops实践指南》
技术债务,因为某些原因并没有及时偿还,导致一致产生利息
每一家公司都是一家科技公司,无论他们是否意识到,银行就是一家有银行执照的科技公司。无论他们是否意识到，银行就是一家有银行执照的科技公司
第一部分
	第2章 流动原则(从左到右)
	2.1使工作可见(泳道图,清晰可见各环节所处位置)
	2.2限制制品数,可以避免一个人有多任务,如无任务则协助上一流程进行处理,例如设置上线为3
	2.3减小批量大小,避免第一步出错后整体重做
	2.4减少交接次数,减少组织架构层级,避免知识流失
	2.5持续识别和改善约束点
	2.6消除价值流中的困境和浪费,避免手动操作,半成品等
	第3章 反馈原则(从右到左)
	3.1复杂系统安全地工作,相同功能同样输入,输出未必相同
	3.2及时发现问题
	3.3发现问题及时解决,避免技术利息
	3.4源头保证质量
	3.5为下游工作做准备,例如非对称物品的防呆接口
	第4章 持续学习与实验原则
	4.1学习型团队
	4.2日常工作的改进制度化(雷厉风行的红头文件)
	4.3局部发现转为整体优势
	4.4日常工作中弹性工作(任务紧急则加紧产出,不紧急则优化流程,而不是增加任务)
第二部分
	第5章 合适的转型
	5.1绿地项目和综地项目, devops也可以应对棕地项目优化效率
	5.2记录型系统和交互性系统(记录型已ERP财务类为主,数据准确性为先符合某些标准)
	5.3从最乐于创新的团队开始
	5.4扩大devops范围
	第6章 理解、可视化和运用价值流
	6.1确定工作职责
	6.2绘制价值流图
	6.3组件专内的转型团队(预留20%的非技术时间减少技术债务)
	第7章
	7.1组织原型(职能型、矩阵型、市场型)
	7.2~7.6避免过度职能化
	7.7服务于产品而非项目,避免时间倒逼进度
	7.8避免按职能分团队,尽量保证各小团队可独立运作,特别是避免其开发测试运维在不同地方办公增加沟通成本
	7.9创建松耦合架构,提高生产力和安全性,两个披萨原则(小团队5~10人)
	第8章 将运维工程师融入服务团队
	8.1创建平台,由平台运维工程师统一处理
	8.2运维工程师转向市场导向(打入到团队内,参与各个环节的辅助决策)
	8.3因为运维工程师的缺少,可以指定为运维联络
	8.4邀请运维工程师参加团队会议
第三部分
	第9章 按需搭建开发环境、测试环境和生产环境
	9.1按需搭建开发、测试、生产环境
	9.2应用统一的代码仓库
	9.3使基础设施的重建变得容易
	9.4运行在类生产环境才算完
	第10章 实现快速可靠的自动化测试
	10.1对代码和环境做持续构建、测试和集成
	10.2构建快速可靠的自动化测试套件(单元测试、验收测试、集成测试)
	10.3部署流水线失败时自动回滚
	第11章 应用和实践持续集成
	11.1基于trunk主分支,各自开发进行合并
	第12章 自动化和低风险发布
	12.1蓝绿部署模式(两套环境，互为生产、验证环境进行无缝切换，数据库进行增量式变更)
	12.2金丝雀模式
	12.3实现黑启动，用户不可主动点击
	第13章 降低发布风险的架构
	微服务，安全地演进中心
	第14章集中式监控
	第15章监控警告
	第16章LRR(交接审核)HRR(上线审核)
	第17章时刻保持A/B原则(即该功能自己要觉得舒适，该方案广泛应有市场调研选择，不同的风格让用户选择，哪种成功率更高)
	第18章变更评审并使之有效(最了解问题的人是距离问题最近的人)
	第19章事后分析、生产环境注入问题并测试修复
	第20章局部扩散整体(例如事故经验，自动化测试经验)
	第21章鱼柳组织学习和改进的时间(偿还技术债务、分享经验)
	第22章自动化漏洞扫描在各个环境