1 简介
	1.1 ZooKeeper的使命
		HBase(Hadoop大数据)、 Kafka(mq解耦)、Solr(搜索)、Fetching Service(爬虫)、Facebook Messages(通信)
	1.2 ⽰例：主-从应⽤
		1.2.1 主节点失效
			需要找出⼀种⽅法来处理主节点失效的情况，关键是我们需要避 免发⽣脑裂的情况。
		1.2.2 从节点失效
			如果从节点崩溃了，所有已派发给这个从节点且尚未完成的任务需要 重新派发
		1.2.3 通信故障
			如果⼀个从节点与主节点的⽹络连接断开，⽐如⽹络分区（network partition）导致，重新分配⼀个任务可能会导致两个从节点执⾏相同的任 务。
	1.3 分布式协作的难点
		CAP
	1.4 ZooKeeper的成功和注意事项
		ZooKeeper最初由雅虎研究院开发，⽤于处理⼤量的⼤型分布式应⽤。 我们注意到，这些应⽤在分布式协作⽅⾯的处理⽅式并不妥当，这些系统的部署存在单点故障问题或很脆弱
2 了解ZooKeeper
	2.1 ZooKeeper基础
		ZooKeeper并不直接暴露原语， 取⽽代之，它暴露了由⼀⼩部分调⽤⽅法组成的类似⽂件系统的API，以 便允许应⽤实现⾃⼰的原语。我们通常使⽤菜谱（recipes）来表⽰这些原 语的实现。菜谱包括ZooKeeper操作和维护⼀个⼩型的数据节点，这些节点 被称为znode，采⽤类似于⽂件系统的层级树状结构进⾏管理
		2.1.1 API概述
			znode节点可能含有数据，也可能没有。字节数组的具体格式特定 于每个应⽤的实现，ZooKeeper并不直接提供解析的⽀持。
			常用API
				create/path data
				delete/path
				exists/path
				setData/path data
				getData/path
				getChildren/path
		2.1.2 znode的不同类型
			持久节点
			临时节点
			持久有序节点
			临时有序节点
		2.1.3 监视与通知
			为了替换客户端的轮询，我们选择了基于通知（notification）的机制：客户端向ZooKeeper注册需要接收通知的 znode，通过对znode设置监视点（watch）来接收通知
			为了接收多个通知，客户端必 须在每次通知后设置⼀个新的监视点
			通知机制的⼀个重要保障是，对同⼀个znode的操作，先向客户端传送 通知，然后再对该节点进⾏变更
		2.1.4 版本
			每⼀个znode都有⼀个版本号，它随着每次数据变化⽽⾃增。两个API 操作可以有条件地执⾏：setData和delete。这两个调⽤以版本号作为转⼊参数，只有当转⼊参数的版本号与服务器上的版本号⼀致时调⽤才会成功。(乐观锁)
	2.2 ZooKeeper架构
		独⽴模式（standalone）和仲裁模式（quorum）
		在仲裁模式下，具有⼀组ZooKeeper服 务器，我们称为ZooKeeper集合（ZooKeeper ensemble），它们之前可以进 ⾏状态的复制，并同时为服务于客户端的请求。
		2.2.1 ZooKeeper仲裁
			在仲裁模式下，ZooKeeper复制集群中的所有服务器的数据树。
			但如果让⼀个客户端等待每个服务器完成数据保存后再继续，延迟问题将⽆法接受。在公共管理领域，法定⼈数是指进⾏⼀项投票所需的⽴法者的最⼩数量。这个数字也是服务器告知客户端安全保存数据前，需要保存客户端数据的服务器的最⼩个数。
		2.2.2 会话
			客户端通过TCP协议与服务器进⾏连接并通信，但当会话 ⽆法与当前连接的服务器继续通信时，会话就可能转移到另⼀个服务器上。会话提供了顺序保障，这就意味着同⼀个会话中的请求会以FIFO。通常，⼀个客户端只打开⼀个会话。
	2.3 开始使⽤ZooKeeper
	2.4 ⼀个主-从模式例⼦的实现
		主-从模式的模型中包括三个⾓⾊
		主节点
			主节点负责监视新的从节点和任务，分配任务给可⽤的从节点。
		从节点
			从节点会通过系统注册⾃⼰，以确保主节点看到它们可以执⾏任务， 然后开始监视新任务。
		客户端
			客户端创建新任务并等待系统的响应。
3 开始使⽤ZooKeeper的API
	3.1 设置ZooKeeper的CLASSPATH
	3.2 建⽴ZooKeeper会话
		ZooKeeper的API围绕ZooKeeper的句柄（handle）⽽构建，每个API调 ⽤都需要传递这个句柄
		ZooKeeper( String connectString, int sessionTimeout, Watcher watcher)
			connectString：包含主机名和ZooKeeper服务器的端口
			sessionTimeout：表⽰ZooKeeper等待客户端通信的最长时间
			watcher：⽤于接收会话事件的⼀个对象，这个对象需要我们⾃⼰创建。如果与ZooKeeper的会话过期，也会通过Watcher接⼜传递事件来通知客户端 的应⽤。
		如果ZooKeeper服务⾄少由三台服务器组成，那么⼀个服务器的 故障并不会导致服务中断。⽽客户端也会很快收到Disconnected事件，之后 便为SyncConnected事件。
	3.3 获取管理权
	3.4 注册从节点
	3.5 任务队列化
	3.6 管理客户端
4 处理状态变化
	在应⽤程序中，需要知道ZooKeeper集合的状态，检查系统状态是否发⽣了变化
	4.1 单次触发器
		当⼀个监视点被⼀个事件触发 时，就会产⽣⼀个通知（notification）。当应⽤程序注册了⼀个监视点来接收通知，匹配该监视点条件的第⼀ 个事件会触发监视点的通知，并且最多只触发⼀次。(如果每个通知平均捕获两个事件，我们为每个事件只产⽣ 了0.5个通知)
	4.2 如何设置监视点
		数据监视点和⼦节点监视点。
		创建、删除或设置 ⼀个znode节点的数据都会触发数据监视点
		只有getChildren操作可以设置⼦节点监视点，这种监 视点只有在znode⼦节点创建或删除时才被触发
	4.3 普遍模型
		1.进⾏调⽤异步。 2.实现回调对象，并传⼊异步调⽤函数中。 3.如果操作需要设置监视点，实现⼀个Watcher对象，并传⼊异步调⽤函数中。
	4.4 主-从模式的例⼦
	4.5 另⼀种调⽤⽅式：Multiop
		Multiop并⾮ZooKeeper的原始设计，该特性在3.4.0版本中被添加进 来。Multiop可以原⼦性地执⾏多个ZooKeeper的操作
	4.6 通过监视点代替显式缓存管理
	4.7 顺序的保障
		4.7.1 写操作的顺序
			ZooKeeper状态会在所有服务端所组成的全部安装中进⾏复制。服务端 对状态变化的顺序达成⼀致，并使⽤相同的顺序执⾏状态的更新
		4.7.2 读操作的顺序
			ZooKeeper客户端总是会观察到相同的更新顺序，即使它们连接到不同的服务端上。但是客户端可能是在不同时间观察到了更新，如果他们还在 ZooKeeper以外通信，这种差异就会更加明显。
		4.7.3 通知的顺序
			ZooKeeper根据触发通知的状态更新对通知消息进⾏排序，客户端 就可以通过这些通知感知到真正的状态变化的顺序
	4.8 监视点的⽺群效应和可扩展性
		当变化发⽣时，ZooKeeper会触发⼀个特定的 znode节点的变化导致的所有监视点的集合。如果有1000个客户端通过 exists操作监视这个znode节点，那么当znode节点创建后就会发送1000个通 知
5 故障处理
	5.1 可恢复的故障
		已存在的监视点与Disconnected事件
			为了使连接断开与重现建⽴会话之间更加平滑，ZooKeeper客户端库会 在新的服务器上重新建⽴所有已经存在的监视点。当客户端连接ZooKeeper的服务器，客户端会发送监视点列表和最后已知的zxid（最终状态的时间戳）
	5.2 不可恢复的故障
		对这种状态丢失最明显的例⼦就是临时性节点，这种节点在会话关闭 时会被删除
	5.3 群⾸选举和外部资源
		当回收⼤量内存时，偶尔就会出现长时间的垃圾回收周 期，导致进程暂停⼀段时间
6 ZooKeeper注意事项
	6.1 使⽤ACL
		鉴权
		ZooKeeper提供了4种内置模式进⾏ACL的处理
	6.2 恢复会话
		客户端崩溃时，已经提交给ZooKeeper的待处理操作 也许已经完成了，由于客户端崩溃导致⽆法收到确认消息，ZooKeeper⽆法 保证这些操作肯定会成功执⾏，因此，客户端在恢复时也许需要进⾏⼀些 ZooKeeper状态的清理操作
	6.3 当znode节点重新创建时，重置版本号
		在⼀个znode节点删除中和重建中，但其版本号仍然为0
	6.4 sync⽅法
		如果应⽤客户端只对ZooKeeper的读写来通信，应⽤程序就不⽤考虑 sync⽅法
		问题主要源于⼀个客户端c也许通过某些直接 通道（例如，c和c'之间通过TCP连接进⾏通讯）来通知另⼀个客户端c进⾏ ZooKeeper状态变化
	6.5 顺序性保障
		6.5.1 连接丢失时的顺序性
		6.5.2 同步API和多线程的顺序性
		6.5.3 同步和异步混合调⽤的顺序性
	6.6 数据字段和⼦节点的限制
		ZooKeeper默认情况下对数据字段的传输限制为1MB
	6.7 嵌⼊式ZooKeeper服务器
		虽然我们不建议采⽤嵌⼊式ZooKeeper服务器，但也没有什么理论阻⽌ ⼀个⼈这样做
7 C语⾔客户端
8 Curator：ZooKeeper API的⾼级封装库
	Curator作为ZooKeeper的⼀个⾼层次封装库，为开发⼈员封装了 ZooKeeper的⼀组开发库
	8.1 Curator客户端程序
	8.2 流畅式API
	8.3 监听器
	8.4 Curator中状态的转换
	8.5 两种边界情况
	8.6 菜谱
9 ZooKeeper内部原理
	9.1 请求、事务和标识符
		因为服务器会在本地处理请 求，所以ZooKeeper在处理以只读请求为主要负载时，性能会很⾼。
		那些会改变ZooKeeper状态的客户端请求（create、delete和setData）将 会被转发给群⾸，群⾸执⾏相应的请求，并形成状态的更新，我们称为事 务（transaction）
		当群⾸产⽣了⼀个事务，就会为该事务分配⼀个标识符，我们称之为 ZooKeeper会话ID（zxid），通过Zxid对事务进⾏标识，就可以按照群⾸所 指定的顺序在各个服务器中按序执⾏。服务器之间在进⾏新的群⾸选举时 也会交换zxid信息，这样就可以知道哪个⽆故障服务器接收了更多的事 务，并可以同步他们之间的状态信息。
	9.2 群⾸选举
		设置群⾸的⽬的是为了对客户端所发起的ZooKeeper状态变更请求进⾏ 排序，包括：create、setData和delete操作。群⾸将每⼀个请求转换为⼀个事务。
		简⽽⾔之，只有最新的服务器将赢得选举，因为其拥有最近⼀次的 zxid。⼀旦连接成功，追随者和群⾸之间将 会进⾏状态同步，在同步完成后，追随者才可以处理新的请求。
		zxid相同则会投给机器id最大的
	9.3 Zab：状态更新的⼴播协议
		Zab：ZooKeeper原⼦⼴播协议
			1.群⾸向所有追随者发送⼀个PROPOSAL消息p。
			2.当⼀个追随者接收到消息p后，会响应群⾸⼀个ACK消息，通知群⾸ 其已接受该提案（proposal）。
			3.当收到仲裁数量的服务器发送的确认消息后（该仲裁数包括群⾸⾃ ⼰），群⾸就会发送消息通知追随者进⾏提交（COMMIT）操作。
	9.4 观察者
		观察者和追随者之间有⼀些共同点。具体说来，他们提交来 ⾃群⾸的提议。不同于追随者的是，观察者不参与我们之前介绍过的选举 过程。他们仅仅学习经由INFORM消息提交的提议。由于群⾸将状态变化 发送给追随者和观察者，这两种服务器也都被称为学习者。
		引⼊观察者的⼀个主要原因是提⾼读请求的可扩展性。通过加⼊多个 观察者，我们可以在不牺牲写操作的吞吐率的前提下服务更多的读操作。
	9.5 服务器的构成
		9.5.1独立服务器
			PrepRequestProcessor接受客户端的请求并执⾏这个请求
			SyncRequestProcessor负责 将事务持久化到磁盘上。
			FinalRequestProcessor。如果Request对象 包含事务数据，该处理器将会接受对ZooKeeper数据树的修改
		9.5.2仲裁模式
			第⼀个处理器同样是PrepRequestProcessor
			ProposalRequestProcessor将会把所有请求都转发给 CommitRequestProcessor、⽽且，对于写操作请求，还会将请求转发给 SyncRequestProcessor处理器。
			写
				SyncRequestProcessor处理器所执⾏的操作与独⽴服务器中的⼀样，即 持久化事务到磁盘上，执⾏完之后会触发AckRequestProcessor处理器
			读写
				CommitRequestProcessor会将收到⾜够多的确认消息的提议进⾏提交。
				ToBeAppliedRequestProcessor，这个处理器会从提议列表中删除那些待接受的提议
				FinalRequestProcessor处理更新类型的请求，并执⾏读取请求
		9.5.3 追随者和观察者服务器
			⾸先从FollowerRequestProcessor处理器开始
			CommitRequestProcessor，同时也会转发写请求到群⾸服务器。当群⾸接收到⼀个新的写请求操作时，直接地或通过其他追随者服务 器来⽣成⼀个提议
			CommitRequestProcessor在转发给 FinalRequestProcessor处理器之前会等待提交事务。
	9.6 本地存储
		9.6.1 ⽇志和磁盘的使⽤
			因为写事务⽇志是写请求操作的关键路径，因此ZooKeeper必须有效处 理写⽇志问题。⼀般情况下追加⽂件到磁盘都会有效完成
		9.6.2 快照
			快照是ZooKeeper数据树的拷贝副本，每⼀个服务器会经常以序列化整 个数据树的⽅式来提取快照，并将这个提取的快照保存到⽂件中。每⼀个快照⽂件都会以快照开始时最后⼀个被提交的事务作为标记
	9.7 服务器与会话
		为了保证会话的存活，服务器需要接收会话的⼼跳信息。⼼跳的形式 可以是⼀个新的请求或者显式的ping消息
	9.8 服务器与监视点
		监视点是由读取操作所设置的⼀次性触发器，每个监视点由⼀个特定操作来触发。
	9.9 客户端
		在客户端库中有2个主要的类：ZooKeeper和ClientCnxn。ZooKeeper类 实现了⼤部分API，写客户端应⽤程序时必须实例化这个类来建⽴⼀个会 话。⼀旦建⽴起⼀个会话，ZooKeeper就会使⽤⼀个会话标识符来关联这个 会话。这个会话标识符实际上是由服务端所⽣成的
	9.10 序列化
		对于⽹络传输和磁盘保存的序列化消息和事务，ZooKeeper使⽤了 Hadoop中的Jute来做序列化
10 运⾏ZooKeeper
	10.1 配置ZooKeeper服务器
	10.2 配置ZooKeeper集群
	10.3 重配置
	10.4 配额管理
	10.5 多租赁配置
	10.6 ⽂件系统布局和格式
	10.7 四字母命令
	10.8 通过JMX进⾏监控