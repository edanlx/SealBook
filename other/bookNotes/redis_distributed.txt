redis进阶
《Redis入门指南 第2版》
4.1事务处理
watch命令，可以监控多个key，一旦某个被监控的值被修改，当前事务未执行的命令不会再执行
4.2过期时间
淘汰规则
|规则|说明|
|--|--|
|volatile-lru|使用LRU算法那删除一个键(只对设置了过期时间的)|
|allkeys-lru|使用LRU算法那删除一个键|
|volatils-random|随机删除一个键(只对设置了过期时间的)|
|allkeys-random|随机删除一个键|
|volatile-ttl|删除过期时间最近的一个键|
|noeviction|直接返回错误|
4.3排序
	4.3.2sort
	直接排序使用sort命令即可，可跟随desc命令
	4.3.3by命令
	依赖其它字段排序
	```
	redis>LPUSH sortbylist 2 1 3
	(integer)3
	redis>SET itemscore:1 50
	OK
	redis>SET itemscore:2 100
	OK
	redis>SET itemscore:3 -10
	OK
	redis>SORT sortbylist BY itemscore:* DESC
	1)2
	2)1
	3)3
	```
	4.3.4get命令
	假设列表 mylist包含元素1、 2 和 3，分别代表了存储在object_1、object_2 和 object_3中的对象的唯一ID。当这些对象关联到存储在weight_1、 weight_2 和 weight_3 中的权重
	SORT mylist BY weight_* GET object_*。此时返回的是object_1、object_2、object_3。这里mylist存储的元素必须与object_*、weight_*中的*对应
	4.3.5store参数
	可以将结果再存储
	4.3.6性能优化
	当排序的结果很大时，需要使用limit参数
4.4消息通知
6.脚本
	Redis在2.6版本推出了脚本功能,允许开发者使用Lua语言编写脚本传到Redis中执行。好处如下:
	1)减少网络开销，合并请求
	2)原子操作
	3)复用，会被保存到redis，其它语言也可以调用
7.持久化
	与基础版一致
8.集群
	8.1复制
		8.1.5从数据库持久化
			采用哨兵模式
		8.1.6无硬盘复制
			一般复制为RDB复制，为了解决RDB文件的网络开销。可以开启无硬盘复制，直接将命令进行发送与AOF类似
		8.1.7增量复制
			1)从数据库记录主数据库id
			2)每个向从数据库发送的命令会存入积压队列且有自己的偏移量
			3)从数据库每次同步完成会记录偏移量，如果相差过大(即积压队列中没有)则进行完全同步
	8.2哨兵
		8.2.3实现原理
		在一主多从的情况下，可以使用哨兵进行监控，使系统足够稳健。哨兵只需要配置主数据库，从数据库会自行读取，同时其会完成选举等操作。使用redis-sentinel /path/sentinel.conf进行启动。启动后会立即与主库建立连接，并定时执行下面3个操作
		1)每10秒会向主数据库、从数据库发送INFO命令
		2)每2秒向主、从数据库发送自己的信息
		3)每1秒向主从及其它哨兵发送ping命令
		当发现主数据库下线时采用Raft算法进行选举领头哨兵
		1)当前哨兵节点发送其它哨兵要求选自己
		2)如果目标哨兵没有投票其他人则投票给该节点
		3)如果超过半数则成为领头哨兵
		4)选举失败则重新发起
		挑选主数据库一般通过复制偏移量为准，条件一样则id小的优先
		8.2.4哨兵的部署
		一般每个节点都部署一个哨兵
	8.3集群
		8.3.1一个集群至少要3个节点
		8.3.2节点的增加
		8.3.3插槽的分配
			从16384个插槽进行均分。slot的有效部分为整个key如果有{}则以括弧内为准
		8.3.4获取与插槽对应的点
			如果该键不在该节点中则返回move命令重定向。客户端记录当前插槽是由哪个节点负责的。仅有16384个插槽
		8.3.5故障恢复
			集群中每个节点都会发送ping命令，相当于每个主节点都是哨兵。如果某个节点下线，则执行与哨兵模式一致的逻辑
9.管理
	9.2协议
		9.2.1简单协议
		9.2.2统一请求协议
			AOF复制等都是该协议

《Redis设计与实现》
redis高级
2.简单动态字符串
	2.1SDS的定义
		SDS，redis自己使用的字符串语言(simple dynamic string)，没有使用C字符串。
		{
			// 记录buf数量，SDS字符串长度
			int len;
			// 记录buf中未使用的数量
			int free;
			// 记录字符串
			char buf[]
		}
	2.2SDS与C的区别
		C的最后一个字符总是'\0'结束，难以判断该字符串是不是用户存储的
		|C字符串|SDS|
		|--|--|
		|获取字符串长度的复杂度为O(N)|获取字符串长度的复杂度为O(1)|
		|API不安全有可能造成缓冲区溢出|API安全|
		|修改字符串长度N次必然要执行N次内存分配|修改字符串长度N次最多执行N次内存分配|
		|只能保存文本数据|可以保存二进制数据|
		|可以使用C库所有函数|只能使用C库部分函数|
3.链表(list)
	3.1链表的实现
		listnode:{
			// 前置节点
			listnode prev;
			// 后置节点
			listnode next;
			// 节点的值
			void value
		}
		list:{
			// 头节点
			listnode head;
			// 尾节点
			listnode tail;
			// 节点数量
			unsigned long len;
			...(match对比函数、dup复制函数、free释放函数等)
		}
		链表特性:
		1.双端双向
		2.无环
		3.获取头部尾部、数量都是O(1)
		4.多态，根据情况使用不同的函数，广泛用于多种场景，列表键(list)、发布与订阅、慢查询、监视器等
4.字典(hash)
	亦可称作map
	4.1字典的实现
		4.1.1哈希表
		dictht{
			//哈希表数组
			dictEntry table
			//哈希表大小
			unsigned long size
			//哈希表掩码
			unsigned long sizemark
			//哈希表亦有节点的数量
			unsigned long used
		}
		4.1.2节点
		dictEntry{
			// 键
			void key
			// 值
			union {

			}v
			// 下一个哈希节点形成链表
			dictEntry next
		}
		4.1.3字典
		dict{
			//数据类型
			dictType type
			//rehash状态
			int trehashidx
			// 哈希表
			dictht ht[2]
		}
	4.2哈希算法
		MurmurHash2算法
	4.3键冲突
		使用链地址法，即后面跟链表
	4.4rehash
		每次将ht[0]向ht[1]迁移，完毕后ht[0]清空，再将ht[0]与ht[1]互换。扩张大小为2倍，缩小也是
	4.5rehash渐进式
		在rehash期间的所有操作都会在ht[0]执行完毕后rehash到ht[1]
5.跳跃表(zset)
	5.1跳跃表的实现
		5.1.1跳跃表的节点
		zskiplistnode{
			// 层
			zskiplistlevel{
				// 前进指针
				zskiplistnode forward
				// 跨度
				unsigned int span
			}level[]
			// 后退指针
			zskiplistnode backward
			//分值
			double score
			// 成员对象
			robj obj
		}
		1.层:每个节点的level数组可以包含多个元素，每个元素都包含一个指向其它节点的指针。每次创建一个新跳表都会随机生成一个1~32之间的高度也即level数组的大小
		2.前进指针:level[i].forward由当前节点(zskiplistnode)指向下一个节点(zskiplistnode)的表尾。例如遍历时根据这个属性判断有没有到底
		3.跨度:两个节点之间的节点数
		4.后退指针:指向上一个节点
		5.分值和成员
			节点按照分值大小排列。分值相同根据成员对象的字典中的排序，小的在前靠近表头
	跳表是有序集合(zset)的底层实现之一，也是主要实现
6.整数集合(set)
	6.1整数集合的实现
	intset{
		// 编码方式
		uint32_t encoding
		// 元素数量
		uint32_t length
		// 保存元素的数组
		int8_t contents[]
	}
	6.2升级
		当添加的元素比现有的都要长时则进行升级(不支持降级)
		1)扩展长度
		2)转换所有元素类型
		3)添加
	整数集合是集合键(set)的实现之一
7.压缩列表(list、map)
	ziplist是列表键和哈希键的底层实现之一。当一个列表键只包含少量的整数或较短的字符串时，map同样情况时会选择该结构
	|zlbytes(4字节)|zltail(4字节)|zllen(2字节)|entry1|...|entryn|zlend(1字节)|
8.对象
	8.1对象的类型与编码
	即5个主要对象，sring、list、hash、set、zset。
	|类型|编码|对象|
	|--|--|--|
	|REDIS_STRING|REDIS_ENCODING_INT|使用整数值实现的字符串对象|
	|REDIS_STRING|REDIS_ENCODING_EMBSTR|使用embstr编码实现的字符串对象|
	|REDIS_STRING|REDIS_ENCODING_RAW|使用简单动态字符串实现的字符串对象|
	|REDIS_LIST|REDIS_ENCODING_ZIPLIST|使用压缩列表实现的列表对象|
	|REDIS_LIST|REDIS_ENCODING_LINKEDLIST|使用双端链表实现的列表对象|
	|REDIS_HASH|REDIS_ENCODING_ZIPLIST|使用压缩列表实现的哈希对象|
	|REDIS_HASH|REDIS_ENCODING_HT|使用字典实现的哈希对象|
	|REDIS_SET|REDIS_ENCODING_INTSET|使用整数集合实现的集合对象|
	|REDIS_SET|REDIS_ENCODING_HT|使用字典实现的集合对象|
	|REDIS_ZSET|REDIS_ENCODING_ZIPLIST|使用压缩列表实现的有序集合对象|
	|REDIS_ZSET|REDIS_ENCODING_SKIPLIST|使用跳跃表实现的有序集合对象|
	8.2字符串
	embstr为只读，修改时则转为raw。长度小于32字节使用embstr
	8.3列表
	同时满足长度都小于64字节，元素数量小于512个使用压缩列表
	8.4哈希对象
	同上
	8.5集合对象
	同上，第一条调整为数值类型
	8.6有序集合
	长度64字节，元素数量小于128个时用压缩列表

	补充：redis也会共享对象，0~9999的字符串对象
9.数据库
	数据库主要由dict和expire两个字典构成
	redis使用定期删除和惰性删除两种策略
	aof和rdb产生的新文件都不会包含过期key
	从服务器不会删除键，会等待主节点发送删除命令
10.RDB持久化
	RDB文件格式
	|REDIS|db_version|database|EOF|check_sum|
	REDIS:5个字符，文件合法性
	db_version：4个字节，RDB文件的版本和redis版本有关
	database:多个数据库
	check_sum:前多项的计算和，校验合法性
11.AOF持久化
混合持久化，文件开头为RDB,后面为AOF
AOF文件通过保存所有修改数据库的写命令来记录服务器的数据状态
所有命令都以Redis命令请求协议保存不同于RDB的二进制
命令请求会先到缓冲区再定期同步到AOF文件
12.事件
redis使用IO多路复用器
13.客户端
14.服务器
15.复制
16.Sentinel
17.集群
18.发布与订阅
19.事务
20.Lua脚本
21.排序
22.二进制位数组
23.慢查询日志
24.监视器